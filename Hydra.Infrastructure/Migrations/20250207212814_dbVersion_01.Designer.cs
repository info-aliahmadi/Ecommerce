// <auto-generated />
using System;
using Hydra.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Hydra.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250207212814_dbVersion_01")]
    partial class dbVersion_01
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Hydra.Auth.Domain.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Permission", "Auth");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "AUTH.USER_MANAGEMENT",
                            NormalizedName = "AUTH.USER_MANAGEMENT"
                        },
                        new
                        {
                            Id = 2,
                            Name = "AUTH.PERMISSION_MANAGEMENT",
                            NormalizedName = "AUTH.PERMISSION_MANAGEMENT"
                        },
                        new
                        {
                            Id = 2001,
                            Name = "CMS.ADD_OR_UPDATE_SETTINGS",
                            NormalizedName = "CMS.ADD_OR_UPDATE_SETTINGS"
                        },
                        new
                        {
                            Id = 2002,
                            Name = "CMS.GET_TOPIC_LIST",
                            NormalizedName = "CMS.GET_TOPIC_LIST"
                        },
                        new
                        {
                            Id = 2003,
                            Name = "CMS.GET_TOPIC_BY_ID",
                            NormalizedName = "CMS.GET_TOPIC_BY_ID"
                        },
                        new
                        {
                            Id = 2004,
                            Name = "CMS.ADD_TOPIC",
                            NormalizedName = "CMS.ADD_TOPIC"
                        },
                        new
                        {
                            Id = 2005,
                            Name = "CMS.UPDATE_TOPIC",
                            NormalizedName = "CMS.UPDATE_TOPIC"
                        },
                        new
                        {
                            Id = 2006,
                            Name = "CMS.DELETE_TOPIC",
                            NormalizedName = "CMS.DELETE_TOPIC"
                        },
                        new
                        {
                            Id = 2007,
                            Name = "CMS.GET_TAG_LIST",
                            NormalizedName = "CMS.GET_TAG_LIST"
                        },
                        new
                        {
                            Id = 2008,
                            Name = "CMS.GET_TAG_BY_ID",
                            NormalizedName = "CMS.GET_TAG_BY_ID"
                        },
                        new
                        {
                            Id = 2009,
                            Name = "CMS.ADD_TAG",
                            NormalizedName = "CMS.ADD_TAG"
                        },
                        new
                        {
                            Id = 2010,
                            Name = "CMS.UPDATE_TAG",
                            NormalizedName = "CMS.UPDATE_TAG"
                        },
                        new
                        {
                            Id = 2011,
                            Name = "CMS.DELETE_TAG",
                            NormalizedName = "CMS.DELETE_TAG"
                        },
                        new
                        {
                            Id = 2012,
                            Name = "CMS.GET_ARTICLE_LIST",
                            NormalizedName = "CMS.GET_ARTICLE_LIST"
                        },
                        new
                        {
                            Id = 2013,
                            Name = "CMS.GET_TRASH_ARTICLE_LIST",
                            NormalizedName = "CMS.GET_TRASH_ARTICLE_LIST"
                        },
                        new
                        {
                            Id = 2014,
                            Name = "CMS.GET_ARTICLE_BY_ID",
                            NormalizedName = "CMS.GET_ARTICLE_BY_ID"
                        },
                        new
                        {
                            Id = 2015,
                            Name = "CMS.CMS_PINNED_ARTICLE",
                            NormalizedName = "CMS.CMS_PINNED_ARTICLE"
                        },
                        new
                        {
                            Id = 2016,
                            Name = "CMS.ADD_ARTICLE",
                            NormalizedName = "CMS.ADD_ARTICLE"
                        },
                        new
                        {
                            Id = 2017,
                            Name = "CMS.UPDATE_ARTICLE",
                            NormalizedName = "CMS.UPDATE_ARTICLE"
                        },
                        new
                        {
                            Id = 2018,
                            Name = "CMS.DELETE_ARTICLE",
                            NormalizedName = "CMS.DELETE_ARTICLE"
                        },
                        new
                        {
                            Id = 2019,
                            Name = "CMS.RESTORE_ARTICLE",
                            NormalizedName = "CMS.RESTORE_ARTICLE"
                        },
                        new
                        {
                            Id = 2020,
                            Name = "CMS.REMOVE_ARTICLE",
                            NormalizedName = "CMS.REMOVE_ARTICLE"
                        },
                        new
                        {
                            Id = 2021,
                            Name = "CMS.GET_PAGE_LIST",
                            NormalizedName = "CMS.GET_PAGE_LIST"
                        },
                        new
                        {
                            Id = 2022,
                            Name = "CMS.GET_PAGE_BY_ID",
                            NormalizedName = "CMS.GET_PAGE_BY_ID"
                        },
                        new
                        {
                            Id = 2023,
                            Name = "CMS.ADD_PAGE",
                            NormalizedName = "CMS.ADD_PAGE"
                        },
                        new
                        {
                            Id = 2024,
                            Name = "CMS.UPDATE_PAGE",
                            NormalizedName = "CMS.UPDATE_PAGE"
                        },
                        new
                        {
                            Id = 2025,
                            Name = "CMS.DELETE_PAGE",
                            NormalizedName = "CMS.DELETE_PAGE"
                        },
                        new
                        {
                            Id = 2026,
                            Name = "CMS.GET_MENU_LIST",
                            NormalizedName = "CMS.GET_MENU_LIST"
                        },
                        new
                        {
                            Id = 2027,
                            Name = "CMS.GET_MENU_BY_ID",
                            NormalizedName = "CMS.GET_MENU_BY_ID"
                        },
                        new
                        {
                            Id = 2028,
                            Name = "CMS.ADD_MENU",
                            NormalizedName = "CMS.ADD_MENU"
                        },
                        new
                        {
                            Id = 2029,
                            Name = "CMS.UPDATE_MENU",
                            NormalizedName = "CMS.UPDATE_MENU"
                        },
                        new
                        {
                            Id = 2030,
                            Name = "CMS.DELETE_MENU",
                            NormalizedName = "CMS.DELETE_MENU"
                        },
                        new
                        {
                            Id = 2031,
                            Name = "CMS.GET_SLIDESHOW_LIST",
                            NormalizedName = "CMS.GET_SLIDESHOW_LIST"
                        },
                        new
                        {
                            Id = 2032,
                            Name = "CMS.GET_SLIDESHOW_BY_ID",
                            NormalizedName = "CMS.GET_SLIDESHOW_BY_ID"
                        },
                        new
                        {
                            Id = 2033,
                            Name = "CMS.ADD_SLIDESHOW",
                            NormalizedName = "CMS.ADD_SLIDESHOW"
                        },
                        new
                        {
                            Id = 2034,
                            Name = "CMS.UPDATE_SLIDESHOW",
                            NormalizedName = "CMS.UPDATE_SLIDESHOW"
                        },
                        new
                        {
                            Id = 2035,
                            Name = "CMS.VISIBLE_SLIDESHOW",
                            NormalizedName = "CMS.VISIBLE_SLIDESHOW"
                        },
                        new
                        {
                            Id = 2036,
                            Name = "CMS.DELETE_SLIDESHOW",
                            NormalizedName = "CMS.DELETE_SLIDESHOW"
                        },
                        new
                        {
                            Id = 3001,
                            Name = "CRM.GET_SETTINGS",
                            NormalizedName = "CRM.GET_SETTINGS"
                        },
                        new
                        {
                            Id = 3002,
                            Name = "CRM.ADD_OR_UPDATE_SETTINGS",
                            NormalizedName = "CRM.ADD_OR_UPDATE_SETTINGS"
                        },
                        new
                        {
                            Id = 3003,
                            Name = "CRM.SEND_PUBLIC_MESSAGE",
                            NormalizedName = "CRM.SEND_PUBLIC_MESSAGE"
                        },
                        new
                        {
                            Id = 3004,
                            Name = "CRM.SEND_PRIVATE_MESSAGE",
                            NormalizedName = "CRM.SEND_PRIVATE_MESSAGE"
                        },
                        new
                        {
                            Id = 3005,
                            Name = "CRM.SAVE_DRAFT_MESSAGE",
                            NormalizedName = "CRM.SAVE_DRAFT_MESSAGE"
                        },
                        new
                        {
                            Id = 3006,
                            Name = "CRM.GET_ALLMESSAGES",
                            NormalizedName = "CRM.GET_ALLMESSAGES"
                        },
                        new
                        {
                            Id = 3007,
                            Name = "CRM.GET_INBOX_MESSAGES",
                            NormalizedName = "CRM.GET_INBOX_MESSAGES"
                        },
                        new
                        {
                            Id = 3008,
                            Name = "CRM.GET_SENT_MESSAGES",
                            NormalizedName = "CRM.GET_SENT_MESSAGES"
                        },
                        new
                        {
                            Id = 3009,
                            Name = "CRM.GET_DRAFT_MESSAGES",
                            NormalizedName = "CRM.GET_DRAFT_MESSAGES"
                        },
                        new
                        {
                            Id = 3010,
                            Name = "CRM.GET_PUBLIC_INBOX_MESSAGES",
                            NormalizedName = "CRM.GET_PUBLIC_INBOX_MESSAGES"
                        },
                        new
                        {
                            Id = 3011,
                            Name = "CRM.GET_DELETED_INBOX_MESSAGES",
                            NormalizedName = "CRM.GET_DELETED_INBOX_MESSAGES"
                        },
                        new
                        {
                            Id = 3012,
                            Name = "CRM.GET_DELETED_SENT_MESSAGES",
                            NormalizedName = "CRM.GET_DELETED_SENT_MESSAGES"
                        },
                        new
                        {
                            Id = 3013,
                            Name = "CRM.GET_MESSAGE_BY_ID_FOR_PUBLIC",
                            NormalizedName = "CRM.GET_MESSAGE_BY_ID_FOR_PUBLIC"
                        },
                        new
                        {
                            Id = 3014,
                            Name = "CRM.GET_MESSAGE_BY_ID_FOR_SENDER",
                            NormalizedName = "CRM.GET_MESSAGE_BY_ID_FOR_SENDER"
                        },
                        new
                        {
                            Id = 3015,
                            Name = "CRM.GET_MESSAGE_BY_ID_FOR_RECEIVER",
                            NormalizedName = "CRM.GET_MESSAGE_BY_ID_FOR_RECEIVER"
                        },
                        new
                        {
                            Id = 3016,
                            Name = "CRM.DELETE_MESSAGE",
                            NormalizedName = "CRM.DELETE_MESSAGE"
                        },
                        new
                        {
                            Id = 3017,
                            Name = "CRM.RESTORE_MESSAGE",
                            NormalizedName = "CRM.RESTORE_MESSAGE"
                        },
                        new
                        {
                            Id = 3018,
                            Name = "CRM.PIN_MESSAGE",
                            NormalizedName = "CRM.PIN_MESSAGE"
                        },
                        new
                        {
                            Id = 3019,
                            Name = "CRM.READ_MESSAGE",
                            NormalizedName = "CRM.READ_MESSAGE"
                        },
                        new
                        {
                            Id = 3020,
                            Name = "CRM.DELETE_DRAFT_MESSAGE",
                            NormalizedName = "CRM.DELETE_DRAFT_MESSAGE"
                        },
                        new
                        {
                            Id = 3021,
                            Name = "CRM.REMOVE_DRAFT_MESSAGE",
                            NormalizedName = "CRM.REMOVE_DRAFT_MESSAGE"
                        },
                        new
                        {
                            Id = 3022,
                            Name = "CRM.LOAD_EMAIL_INBOX",
                            NormalizedName = "CRM.LOAD_EMAIL_INBOX"
                        },
                        new
                        {
                            Id = 3023,
                            Name = "CRM.GET_ALL_EMAIL_INBOX",
                            NormalizedName = "CRM.GET_ALL_EMAIL_INBOX"
                        },
                        new
                        {
                            Id = 3024,
                            Name = "CRM.GET_INBOX_EMAIL_INBOX",
                            NormalizedName = "CRM.GET_INBOX_EMAIL_INBOX"
                        },
                        new
                        {
                            Id = 3025,
                            Name = "CRM.GET_DELETED_EMAIL_INBOX",
                            NormalizedName = "CRM.GET_DELETED_EMAIL_INBOX"
                        },
                        new
                        {
                            Id = 3026,
                            Name = "CRM.GET_EMAIL_INBOX_BY_ID",
                            NormalizedName = "CRM.GET_EMAIL_INBOX_BY_ID"
                        },
                        new
                        {
                            Id = 3027,
                            Name = "CRM.GET_EMAIL_INBOX_BY_ID_FOR_RECEIVER",
                            NormalizedName = "CRM.GET_EMAIL_INBOX_BY_ID_FOR_RECEIVER"
                        },
                        new
                        {
                            Id = 3028,
                            Name = "CRM.DELETE_EMAIL_INBOX",
                            NormalizedName = "CRM.DELETE_EMAIL_INBOX"
                        },
                        new
                        {
                            Id = 3029,
                            Name = "CRM.PIN_EMAIL_INBOX",
                            NormalizedName = "CRM.PIN_EMAIL_INBOX"
                        },
                        new
                        {
                            Id = 3030,
                            Name = "CRM.READ_EMAIL_INBOX",
                            NormalizedName = "CRM.READ_EMAIL_INBOX"
                        },
                        new
                        {
                            Id = 3031,
                            Name = "CRM.REMOVE_EMAIL_INBOX",
                            NormalizedName = "CRM.REMOVE_EMAIL_INBOX"
                        },
                        new
                        {
                            Id = 3032,
                            Name = "CRM.SEND_EMAIL_OUTBOX",
                            NormalizedName = "CRM.SEND_EMAIL_OUTBOX"
                        },
                        new
                        {
                            Id = 3033,
                            Name = "CRM.SAVE_DRAFT_EMAIL_OUTBOX",
                            NormalizedName = "CRM.SAVE_DRAFT_EMAIL_OUTBOX"
                        },
                        new
                        {
                            Id = 3034,
                            Name = "CRM.GET_ALL_EMAIL_OUTBOX",
                            NormalizedName = "CRM.GET_ALL_EMAIL_OUTBOX"
                        },
                        new
                        {
                            Id = 3035,
                            Name = "CRM.GET_EMAIL_OUTBOX",
                            NormalizedName = "CRM.GET_EMAIL_OUTBOX"
                        },
                        new
                        {
                            Id = 3036,
                            Name = "CRM.GET_ADDRESS_FOR_SELECT",
                            NormalizedName = "CRM.GET_ADDRESS_FOR_SELECT"
                        },
                        new
                        {
                            Id = 3037,
                            Name = "CRM.GET_EMAIL_OUTBOX_BY_ID_FOR_SENDER",
                            NormalizedName = "CRM.GET_EMAIL_OUTBOX_BY_ID_FOR_SENDER"
                        },
                        new
                        {
                            Id = 3038,
                            Name = "CRM.REMOVE_EMAIL_OUTBOX",
                            NormalizedName = "CRM.REMOVE_EMAIL_OUTBOX"
                        },
                        new
                        {
                            Id = 4001,
                            Name = "FS.GET_FILE_INFO",
                            NormalizedName = "FS.GET_FILE_INFO"
                        },
                        new
                        {
                            Id = 4002,
                            Name = "FS.GET_FILE_INFO_BY_NAME",
                            NormalizedName = "FS.GET_FILE_INFO_BY_NAME"
                        },
                        new
                        {
                            Id = 4003,
                            Name = "FS.GET_FILES_LIST",
                            NormalizedName = "FS.GET_FILES_LIST"
                        },
                        new
                        {
                            Id = 4004,
                            Name = "FS.GET_GALLEY_FILES",
                            NormalizedName = "FS.GET_GALLEY_FILES"
                        },
                        new
                        {
                            Id = 4005,
                            Name = "FS.GET_DIRECTORIES",
                            NormalizedName = "FS.GET_DIRECTORIES"
                        },
                        new
                        {
                            Id = 4006,
                            Name = "FS.GET_FILES_BY_DIRECTORY",
                            NormalizedName = "FS.GET_FILES_BY_DIRECTORY"
                        });
                });

            modelBuilder.Entity("Hydra.Auth.Domain.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role", "Auth");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "SUPERADMIN",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "ADMIN",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 3,
                            Name = "USER",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = 4,
                            Name = "SUPERVISER",
                            NormalizedName = "SUPERVISER"
                        },
                        new
                        {
                            Id = 5,
                            Name = "GUEST",
                            NormalizedName = "GUEST"
                        });
                });

            modelBuilder.Entity("Hydra.Auth.Domain.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaim", "Auth");
                });

            modelBuilder.Entity("Hydra.Auth.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DefaultLanguage")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("DefaultTheme")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("User", "Auth");
                });

            modelBuilder.Entity("Hydra.Auth.Domain.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ClaimValue")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaim", "Auth");
                });

            modelBuilder.Entity("Hydra.Auth.Domain.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogin", "Auth");
                });

            modelBuilder.Entity("Hydra.Auth.Domain.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole", "Auth");
                });

            modelBuilder.Entity("Hydra.Auth.Domain.UserToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserToken", "Auth");
                });

            modelBuilder.Entity("Hydra.Cms.Core.Domain.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EditDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EditorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPinned")
                        .HasColumnType("bit");

                    b.Property<int?>("PreviewImageId")
                        .HasColumnType("int");

                    b.Property<string>("PreviewImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("WriterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EditorId");

                    b.HasIndex("PreviewImageId");

                    b.HasIndex("WriterId");

                    b.ToTable("Article", "Cms");
                });

            modelBuilder.Entity("Hydra.Cms.Core.Domain.ArticleTag", b =>
                {
                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.HasKey("TagId", "ArticleId");

                    b.HasIndex("ArticleId");

                    b.ToTable("ArticleTag", "Cms");
                });

            modelBuilder.Entity("Hydra.Cms.Core.Domain.ArticleTopic", b =>
                {
                    b.Property<int>("TopicId")
                        .HasColumnType("int");

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.HasKey("TopicId", "ArticleId");

                    b.HasIndex("ArticleId");

                    b.ToTable("ArticleTopic", "Cms");
                });

            modelBuilder.Entity("Hydra.Cms.Core.Domain.Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int?>("ImagePreviewId")
                        .HasColumnType("int");

                    b.Property<int>("LinkSectionId")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LinkSectionId");

                    b.HasIndex("UserId");

                    b.ToTable("Link", "Cms");
                });

            modelBuilder.Entity("Hydra.Cms.Core.Domain.LinkSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.ToTable("LinkSection", "Cms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsVisible = true,
                            Key = "Categories",
                            Title = "Categories"
                        },
                        new
                        {
                            Id = 2,
                            IsVisible = true,
                            Key = "RecentPosts",
                            Title = "Recent Post"
                        });
                });

            modelBuilder.Entity("Hydra.Cms.Core.Domain.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int?>("PreviewImageId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Menu", "Cms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Order = 0,
                            Title = "About",
                            Url = "/About",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Order = 1,
                            Title = "Service",
                            Url = "/Service",
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            Order = 2,
                            Title = "Pricing",
                            Url = "/Pricing",
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            Order = 3,
                            Title = "Contact",
                            Url = "/Contact",
                            UserId = 1
                        },
                        new
                        {
                            Id = 5,
                            Order = 4,
                            Title = "Blog",
                            Url = "/Blog",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Hydra.Cms.Core.Domain.Page", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EditDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EditorId")
                        .HasColumnType("int");

                    b.Property<string>("PageTitle")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("WriterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EditorId");

                    b.HasIndex("WriterId");

                    b.ToTable("Page", "Cms");
                });

            modelBuilder.Entity("Hydra.Cms.Core.Domain.PageTag", b =>
                {
                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.Property<int>("PageId")
                        .HasColumnType("int");

                    b.HasKey("TagId", "PageId");

                    b.HasIndex("PageId");

                    b.ToTable("PageTag", "Cms");
                });

            modelBuilder.Entity("Hydra.Cms.Core.Domain.Slideshow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Header")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int?>("PreviewImageId")
                        .HasColumnType("int");

                    b.Property<string>("PreviewImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Slideshow", "Cms");
                });

            modelBuilder.Entity("Hydra.Cms.Core.Domain.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Tag", "Cms");
                });

            modelBuilder.Entity("Hydra.Cms.Core.Domain.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Topic", "Cms");
                });

            modelBuilder.Entity("Hydra.Crm.Core.Domain.Email.EmailInbox", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("UID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EmailInbox", "Crm");
                });

            modelBuilder.Entity("Hydra.Crm.Core.Domain.Email.EmailInboxAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttachmentId")
                        .HasColumnType("int");

                    b.Property<int>("EmailInboxId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmailInboxId");

                    b.ToTable("EmailInboxAttachment", "Crm");
                });

            modelBuilder.Entity("Hydra.Crm.Core.Domain.Email.EmailInboxFromAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmailInboxId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmailInboxId");

                    b.ToTable("EmailInboxFromAddress", "Crm");
                });

            modelBuilder.Entity("Hydra.Crm.Core.Domain.Email.EmailInboxToAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmailInboxId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmailInboxId");

                    b.ToTable("EmailInboxToAddress", "Crm");
                });

            modelBuilder.Entity("Hydra.Crm.Core.Domain.Email.EmailOutbox", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ReplayToId")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("ReplayToId");

                    b.ToTable("EmailOutbox", "Crm");
                });

            modelBuilder.Entity("Hydra.Crm.Core.Domain.Email.EmailOutboxAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttachmentId")
                        .HasColumnType("int");

                    b.Property<int>("EmailOutboxId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmailOutboxId");

                    b.ToTable("EmailOutboxAttachment", "Crm");
                });

            modelBuilder.Entity("Hydra.Crm.Core.Domain.Email.EmailOutboxFromAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmailOutboxId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmailOutboxId");

                    b.ToTable("EmailOutboxFromAddress", "Crm");
                });

            modelBuilder.Entity("Hydra.Crm.Core.Domain.Email.EmailOutboxToAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmailOutboxId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmailOutboxId");

                    b.ToTable("EmailOutboxToAddress", "Crm");
                });

            modelBuilder.Entity("Hydra.Crm.Core.Domain.Message.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("FromUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("bit");

                    b.Property<int>("MessageType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("FromUserId");

                    b.ToTable("Message", "Crm");
                });

            modelBuilder.Entity("Hydra.Crm.Core.Domain.Message.MessageAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttachmentId")
                        .HasColumnType("int");

                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.ToTable("MessageAttachment", "Crm");
                });

            modelBuilder.Entity("Hydra.Crm.Core.Domain.Message.MessageUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.Property<int>("ToUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.HasIndex("ToUserId");

                    b.ToTable("MessageUser", "Crm");
                });

            modelBuilder.Entity("Hydra.Crm.Core.Domain.Subscribe.Subscribe", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime");

                    b.Property<int>("SubscribeLabelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubscribeLabelId");

                    b.ToTable("Subscribe", "Cms");
                });

            modelBuilder.Entity("Hydra.Crm.Core.Domain.Subscribe.SubscribeLabel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("SubscribeLabel", "Cms");
                });

            modelBuilder.Entity("Hydra.FileStorage.Core.Domain.FileUpload", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Alt")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Directory")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<string>("Tags")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Thumbnail")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("FileUpload", "FS");
                });

            modelBuilder.Entity("Hydra.Infrastructure.Setting.Domain.SiteSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ValueType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Setting", "Infra");
                });

            modelBuilder.Entity("PermissionRole", b =>
                {
                    b.Property<int>("PermissionsId")
                        .HasColumnType("int");

                    b.Property<int>("RolesId")
                        .HasColumnType("int");

                    b.HasKey("PermissionsId", "RolesId");

                    b.HasIndex("RolesId");

                    b.ToTable("PermissionRole", "Auth");
                });

            modelBuilder.Entity("Hydra.Auth.Domain.RoleClaim", b =>
                {
                    b.HasOne("Hydra.Auth.Domain.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hydra.Auth.Domain.UserClaim", b =>
                {
                    b.HasOne("Hydra.Auth.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hydra.Auth.Domain.UserLogin", b =>
                {
                    b.HasOne("Hydra.Auth.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hydra.Auth.Domain.UserRole", b =>
                {
                    b.HasOne("Hydra.Auth.Domain.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hydra.Auth.Domain.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hydra.Auth.Domain.UserToken", b =>
                {
                    b.HasOne("Hydra.Auth.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hydra.Cms.Core.Domain.Article", b =>
                {
                    b.HasOne("Hydra.Auth.Domain.User", "Editor")
                        .WithMany()
                        .HasForeignKey("EditorId");

                    b.HasOne("Hydra.FileStorage.Core.Domain.FileUpload", "PreviewImage")
                        .WithMany()
                        .HasForeignKey("PreviewImageId");

                    b.HasOne("Hydra.Auth.Domain.User", "Writer")
                        .WithMany()
                        .HasForeignKey("WriterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Editor");

                    b.Navigation("PreviewImage");

                    b.Navigation("Writer");
                });

            modelBuilder.Entity("Hydra.Cms.Core.Domain.ArticleTag", b =>
                {
                    b.HasOne("Hydra.Cms.Core.Domain.Article", "Article")
                        .WithMany("ArticleTags")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hydra.Cms.Core.Domain.Tag", "Tag")
                        .WithMany("ArticleTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Hydra.Cms.Core.Domain.ArticleTopic", b =>
                {
                    b.HasOne("Hydra.Cms.Core.Domain.Article", "Article")
                        .WithMany("ArticleTopics")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hydra.Cms.Core.Domain.Topic", "Topic")
                        .WithMany("ArticleTopics")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("Hydra.Cms.Core.Domain.Link", b =>
                {
                    b.HasOne("Hydra.Cms.Core.Domain.LinkSection", "LinkSection")
                        .WithMany("Links")
                        .HasForeignKey("LinkSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hydra.Auth.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LinkSection");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hydra.Cms.Core.Domain.Menu", b =>
                {
                    b.HasOne("Hydra.Cms.Core.Domain.Menu", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Hydra.Cms.Core.Domain.Page", b =>
                {
                    b.HasOne("Hydra.Auth.Domain.User", "Editor")
                        .WithMany()
                        .HasForeignKey("EditorId");

                    b.HasOne("Hydra.Auth.Domain.User", "Writer")
                        .WithMany()
                        .HasForeignKey("WriterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Editor");

                    b.Navigation("Writer");
                });

            modelBuilder.Entity("Hydra.Cms.Core.Domain.PageTag", b =>
                {
                    b.HasOne("Hydra.Cms.Core.Domain.Page", "Page")
                        .WithMany("PageTags")
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hydra.Cms.Core.Domain.Tag", "Tag")
                        .WithMany("PageTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Page");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Hydra.Cms.Core.Domain.Slideshow", b =>
                {
                    b.HasOne("Hydra.Auth.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hydra.Cms.Core.Domain.Topic", b =>
                {
                    b.HasOne("Hydra.Cms.Core.Domain.Topic", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Hydra.Crm.Core.Domain.Email.EmailInboxAttachment", b =>
                {
                    b.HasOne("Hydra.Crm.Core.Domain.Email.EmailInbox", "EmailInbox")
                        .WithMany("EmailInboxAttachments")
                        .HasForeignKey("EmailInboxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmailInbox");
                });

            modelBuilder.Entity("Hydra.Crm.Core.Domain.Email.EmailInboxFromAddress", b =>
                {
                    b.HasOne("Hydra.Crm.Core.Domain.Email.EmailInbox", "EmailInbox")
                        .WithMany("EmailInboxFromAddress")
                        .HasForeignKey("EmailInboxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmailInbox");
                });

            modelBuilder.Entity("Hydra.Crm.Core.Domain.Email.EmailInboxToAddress", b =>
                {
                    b.HasOne("Hydra.Crm.Core.Domain.Email.EmailInbox", "EmailInbox")
                        .WithMany("EmailInboxToAddress")
                        .HasForeignKey("EmailInboxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmailInbox");
                });

            modelBuilder.Entity("Hydra.Crm.Core.Domain.Email.EmailOutbox", b =>
                {
                    b.HasOne("Hydra.Crm.Core.Domain.Email.EmailInbox", "ReplayTo")
                        .WithMany("EmailOutboxs")
                        .HasForeignKey("ReplayToId");

                    b.Navigation("ReplayTo");
                });

            modelBuilder.Entity("Hydra.Crm.Core.Domain.Email.EmailOutboxAttachment", b =>
                {
                    b.HasOne("Hydra.Crm.Core.Domain.Email.EmailOutbox", "EmailOutbox")
                        .WithMany("EmailOutboxAttachments")
                        .HasForeignKey("EmailOutboxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmailOutbox");
                });

            modelBuilder.Entity("Hydra.Crm.Core.Domain.Email.EmailOutboxFromAddress", b =>
                {
                    b.HasOne("Hydra.Crm.Core.Domain.Email.EmailOutbox", "EmailOutbox")
                        .WithMany("EmailOutboxFromAddress")
                        .HasForeignKey("EmailOutboxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmailOutbox");
                });

            modelBuilder.Entity("Hydra.Crm.Core.Domain.Email.EmailOutboxToAddress", b =>
                {
                    b.HasOne("Hydra.Crm.Core.Domain.Email.EmailOutbox", "EmailOutbox")
                        .WithMany("EmailOutboxToAddress")
                        .HasForeignKey("EmailOutboxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmailOutbox");
                });

            modelBuilder.Entity("Hydra.Crm.Core.Domain.Message.Message", b =>
                {
                    b.HasOne("Hydra.Auth.Domain.User", "FromUser")
                        .WithMany()
                        .HasForeignKey("FromUserId");

                    b.Navigation("FromUser");
                });

            modelBuilder.Entity("Hydra.Crm.Core.Domain.Message.MessageAttachment", b =>
                {
                    b.HasOne("Hydra.Crm.Core.Domain.Message.Message", "Message")
                        .WithMany("MessageAttachments")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");
                });

            modelBuilder.Entity("Hydra.Crm.Core.Domain.Message.MessageUser", b =>
                {
                    b.HasOne("Hydra.Crm.Core.Domain.Message.Message", "Message")
                        .WithMany("MessageUsers")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hydra.Auth.Domain.User", "ToUser")
                        .WithMany()
                        .HasForeignKey("ToUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");

                    b.Navigation("ToUser");
                });

            modelBuilder.Entity("Hydra.Crm.Core.Domain.Subscribe.Subscribe", b =>
                {
                    b.HasOne("Hydra.Crm.Core.Domain.Subscribe.SubscribeLabel", "SubscribeLabel")
                        .WithMany("Subscribes")
                        .HasForeignKey("SubscribeLabelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Subscribe_SubscribeLabel");

                    b.Navigation("SubscribeLabel");
                });

            modelBuilder.Entity("Hydra.FileStorage.Core.Domain.FileUpload", b =>
                {
                    b.HasOne("Hydra.Auth.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PermissionRole", b =>
                {
                    b.HasOne("Hydra.Auth.Domain.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hydra.Auth.Domain.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hydra.Auth.Domain.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Hydra.Auth.Domain.User", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Hydra.Cms.Core.Domain.Article", b =>
                {
                    b.Navigation("ArticleTags");

                    b.Navigation("ArticleTopics");
                });

            modelBuilder.Entity("Hydra.Cms.Core.Domain.LinkSection", b =>
                {
                    b.Navigation("Links");
                });

            modelBuilder.Entity("Hydra.Cms.Core.Domain.Page", b =>
                {
                    b.Navigation("PageTags");
                });

            modelBuilder.Entity("Hydra.Cms.Core.Domain.Tag", b =>
                {
                    b.Navigation("ArticleTags");

                    b.Navigation("PageTags");
                });

            modelBuilder.Entity("Hydra.Cms.Core.Domain.Topic", b =>
                {
                    b.Navigation("ArticleTopics");
                });

            modelBuilder.Entity("Hydra.Crm.Core.Domain.Email.EmailInbox", b =>
                {
                    b.Navigation("EmailInboxAttachments");

                    b.Navigation("EmailInboxFromAddress");

                    b.Navigation("EmailInboxToAddress");

                    b.Navigation("EmailOutboxs");
                });

            modelBuilder.Entity("Hydra.Crm.Core.Domain.Email.EmailOutbox", b =>
                {
                    b.Navigation("EmailOutboxAttachments");

                    b.Navigation("EmailOutboxFromAddress");

                    b.Navigation("EmailOutboxToAddress");
                });

            modelBuilder.Entity("Hydra.Crm.Core.Domain.Message.Message", b =>
                {
                    b.Navigation("MessageAttachments");

                    b.Navigation("MessageUsers");
                });

            modelBuilder.Entity("Hydra.Crm.Core.Domain.Subscribe.SubscribeLabel", b =>
                {
                    b.Navigation("Subscribes");
                });
#pragma warning restore 612, 618
        }
    }
}
